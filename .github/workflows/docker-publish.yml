name: Build and Publish Docker Image with Attestation

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'local'
        type: choice
        options:
          - local
          - home

env:
  IMAGE_NAME: docker-local/sigs
  JFROG_CLI_LOG_LEVEL: DEBUG

jobs:
  build-and-push:
    runs-on: self-hosted
    environment: ${{ github.event.inputs.environment }}
    permissions:
      contents: read
      packages: write
      attestations: write  # Required for attestation
      id-token: write      # Added for OIDC token access

    steps:
      - name: Setup JFrog CLI
        id: setup-jfrog-cli
        uses: jfrog/setup-jfrog-cli@v4.5.12
        env:
            JF_URL: ${{ vars.JF_URL }} 
        with:
          version: 2.78.2
          oidc-provider-name: setup-jfrog-cli
          custom-server-id: github-actions

      - name: Check JFrog CLI
        run: |
          jf c use github-actions
          jf rt ping

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
          username: ${{ steps.setup-jfrog-cli.outputs.oidc-user }}
          password: ${{ steps.setup-jfrog-cli.outputs.oidc-token }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: buildkitd.toml

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha
            type=raw,value=${{ env.IMAGE_TAG }}


      # jfrog.io/my-docker-repo/my-docker-image:main
      # jfrog.io/my-docker-repo/my-docker-image:sha256-434sdf

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ env.BUILD_ARGS }}


      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: pkg://my-docker-repo/my-docker-image
          subject-digest: ${{ steps.build-and-push.outputs.digest }}

      - name: Deploy notification
        run: |
          echo "Successfully built and pushed Docker image for ${{ github.event.inputs.environment }} environment"
          echo "Image: ${{ vars.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"



        # mydocker.jfrog.io/hello-world:1.0
        # jfrog.io/mydocker/hello-world:1.0


        # ghcr.io/alenon
        # ${{ env.DOCKER_REGISTRY }}
        # hello-world
        # ${{ env.PKG_NAME }}

        # subject:
        #   name: my-docker-repo.jfrog.io/my-docker-image
        #   digest: sha256:hohofdkdosfjdfijgdfioghdfiuhgdifuh43
        # name: pkg://{repoKey}/{imageName}
        # rb://{name}/{version}/{project}
        # app://{name}/{version}
      # my-docker-repo.jfrog.io/my-docker-image/fdsfkj/fdsf.zip
      
        # my-docker-repo.jfrog.io/my-docker-image/1.0.0


        # jfrog.io/my-docker-repo/my-docker-image:1.0.0   - sha256:hohofdkdosfjdfijgdfioghdfiuhgdifuh43
        # >> my-docker-repo/my-docker-image/1.0.0/list.manifest.json
        # jfrog.io/my-docker-repo/my-docker-image:1.0     - sha256:hohofdkdosfjdfijgdfioghdfiuhgdifuh43
        # >> my-docker-repo/my-docker-image/1.0/list.manifest.json
        # jfrog.io/my-docker-repo/my-docker-image:1       - sha256:hohofdkdosfjdfijgdfioghdfiuhgdifuh43
        # >> my-docker-repo/my-docker-image/1/list.manifest.json
        # jfrog.io/my-docker-repo/my-docker-image:latest  - sha256:hohofdkdosfjdfijgdfioghdfiuhgdifuh43
        # >> my-docker-repo/my-docker-image/latest/list.manifest.json
        
        # yevdo-dev.jfrog.io/my-docker-repo/jfrog/my-docker-image
        # sha256:hohofdkdosfjdfijgdfioghdfiuhgdifuh43


# rb://
# build-infgo://
# docker://
# npm://
# pkg://



#        curl -X HEAD server.jfrog.io/v2/docker-repo-local/distribution/distribution/manifests/sha256:5b756bece92a704cd1dbf971b650dd99d9f949a68ec8f3fa03b0d595694467a3
# - H jfrog-docker
#        cli
#         --- if doesnt have :// -> subject
#         --- if docker://
#             -  aql (resolve repo={repo} AND checksum={sha256}) AND path.endWith({ubuntu})
#                   result   [ "path" ] -> manifest.json|list.manifest.json
#                        filter (_upload)
#                 [] -> POST API * X times per path
#        --- else 